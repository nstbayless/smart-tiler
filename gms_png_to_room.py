#!usr/bin/python

from tilecommon import *
from arrange import *

from PIL import Image
import PIL
import sys
import argparse
import collections
import random
import itertools
import string
import copy

parser = argparse.ArgumentParser(description="using a tileset, converts png to a GM:S room file")

parser.add_argument("map", help = "Input map (such as from vgmaps)")
parser.add_argument("out", help = "output room (.room.gmx)")
parser.add_argument("--neg", help = "Tiles to exclude", default = "")
parser.add_argument("-t", "--tileset", help = "tileset to use", default="")
parser.add_argument("-e", "--extract", help = "extract tileset to (.png)", default="")
parser.add_argument("-n", "--resource-name", help = "name of the background resource in Game Maker, e.g. \"tstMM2Wily1\"", default="")
parser.add_argument("-tw", "--width", type=int, help = "width of grid", default=16)
parser.add_argument("-th", "--height", type = int, help = "height of grid", default=16)
parser.add_argument("-s","--strategy", help = "what strategy to use for arranging tileset (when extracting)",default = "greedy",choices = ["dumb", "greedy", "mlp", "z3"])
parser.add_argument("-r","--rubric", help = "What style of scoring to use for arranging tileset (when extracting)",default = "linear",choices = ["linear","normal","sqrtnormal","sqrnormal"])
parser.add_argument("--trials", type=int, help = "number of times to repeat arrangement method (when extracting)", default=1)
parser.add_argument("--error-summary", help = "show missing tiles as image", action='store_true')

args = parser.parse_args()


# determine matrix and tile_mat
matrix = []
tile_mat = []

if len(args.resource_name) == 0:
  args.resource_name = args.map.split(".")[0]

if len(args.extract) > 0:
    if len(args.tileset) > 0:
      print("cannot use both --extract and --tileset options")
      sys.exit()
    stitched, tiles, matrix, tile_mat = extract_to_tileset(args,args.extract)
    tileset_width = stitched.width
elif len(args.tileset) > 0:
  print("reading tileset " + args.tileset)
  img_tileset = Image.open(args.tileset).convert("RGB")
  tiles, tile_mat, counts, adj = extract(img_tileset,args.width,args.height)
  print("reading " + args.map)
  img_map = Image.open(args.map).convert("RGB")
  tiles, matrix, counts, adj = extract(img_map,args.width,args.height,tiles)
  if len(args.neg) > 0:
    exclude = [False for _ in range(len(tiles))]
    print("reading exclude tileset " + args.neg)
    img_neg = Image.open(args.neg).convert("RGB")
    negtiles, negmat, negcounts, negadj = extract(img_neg,args.width,args.height)
    for t in range(len(tiles)):
      if tiles[t] in negtiles:
        exclude[t] = True
    for x in range(len(matrix)):
      for y in range(len(matrix[x])):
        if exclude[matrix[x][y]]:
          matrix[x][y] = 0
else:
  print("must supply either --extract or --tileset option")
  sys.exit()

# matrix and tile_mat determined above
tile_lookup = {}
for x in range(len(tile_mat)):
  for y in range(len(tile_mat[x])):
    t = tile_mat[x][y]
    if t > 0:
      tile_lookup[t] = (x*args.width,y*args.height)

# Tile lookup

s = """<!--This Document is generated by NaOH's game maker image-to-room converter. Feel free to edit by hand!-->
<room>
  <caption></caption>
  <width>""" + str(args.width * len(matrix)) + """</width>
  <height>""" + str(args.height * len(matrix[0])) + """</height>
  <vsnap>""" + str(args.height) + """</vsnap>
  <hsnap>""" + str(args.width) + """</hsnap>
  <isometric>0</isometric>
  <speed>60</speed>
  <persistent>0</persistent>
  <colour>0</colour>
  <showcolour>-1</showcolour>
  <code></code>
  <enableViews>-1</enableViews>
  <clearViewBackground>-1</clearViewBackground>
  <clearDisplayBuffer>-1</clearDisplayBuffer>
  <makerSettings>
    <isSet>-1</isSet>
    <w>512</w>
    <h>448</h>
    <showGrid>-1</showGrid>
    <showObjects>-1</showObjects>
    <showTiles>-1</showTiles>
    <showBackgrounds>-1</showBackgrounds>
    <showForegrounds>-1</showForegrounds>
    <showViews>0</showViews>
    <deleteUnderlyingObj>0</deleteUnderlyingObj>
    <deleteUnderlyingTiles>-1</deleteUnderlyingTiles>
    <page>0</page>
    <xoffset>0</xoffset>
    <yoffset>0</yoffset>
  </makerSettings>
  <backgrounds></backgrounds>
  <views></views>
  <instances></instances>
  <tiles>
"""

idc = 10012057 - 1
fail_summary_mat = copy.deepcopy(matrix)
for x in range(len(matrix)):
  for y in range(len(matrix[x])):
    tile = matrix[x][y]
    if tile in tile_lookup:
      coord = tile_lookup[tile]
      tname = ''.join(random.choice(string.digits + string.ascii_uppercase) for _ in range(8))
      s += '    <tile bgName="' + args.resource_name + '" x="' + str(x*args.width) + '" y="' + str(y*args.height) + \
      '" w="' + str(args.width) + '" h="' + str(args.height) + '" xo="' + str(coord[0]) + '" yo="' + str(coord[1]) + \
      '" id="' + str(idc) + '" name="tile_' + tname + '" depth="1000000" locked="0" colour="4294967295" scaleX="1" scaleY="1"/>\n'
      fail_summary_mat[x][y] = 255    
    else:
      fail_summary_mat[x][y] = 0
s += """  </tiles>
  <PhysicsWorld>0</PhysicsWorld>
  <PhysicsWorldTop>0</PhysicsWorldTop>
  <PhysicsWorldLeft>0</PhysicsWorldLeft>
  <PhysicsWorldRight>1024</PhysicsWorldRight>
  <PhysicsWorldBottom>768</PhysicsWorldBottom>
  <PhysicsWorldGravityX>0</PhysicsWorldGravityX>
  <PhysicsWorldGravityY>10</PhysicsWorldGravityY>
  <PhysicsWorldPixToMeters>0.100000001490116</PhysicsWorldPixToMeters>
</room>
"""
print ("writing to file " + args.out)
with open(args.out, "w") as f:
  f.write(s)
if args.error_summary:
  print ("Error summary")
  fail_summary = Image.new("1", (len(matrix[0]),len(matrix)))
  fail_summary.putdata((lambda l: [item for sublist in l for item in sublist])(fail_summary_mat))
  fail_summary.transpose(4).transpose(0).show()
print ("done")
